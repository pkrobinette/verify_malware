"""
Run all malimg nnenum tests
"""


import os
import subprocess
from collections import defaultdict
import re
import json
import time
import argparse

def get_args():
    """
    Get arguments. (malimg)
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--save_dir", type=str, default="results/malimg", help="save path")
    parser.add_argument("--subset", action="store_true", help="Run only a subset of experiemnts for repeatability.")
    args = parser.parse_args()

    return args

def get_perturbation(s):
    """
    Get the perturbation value. 
    """
    # Regex pattern to match the number
    pattern = r'(\d+(\.\d+)?)'

    # Searching for the pattern in the string
    match = re.search(pattern, s)

    return match.group(1)

def run_command(command):
    """
    Runs the command
    """
    #
    # Using subprocess to run the command and capture the output
    #
    result = subprocess.run(command, stdout=subprocess.PIPE, text=True)
    #
    # Return the stdout
    #
    return result.stdout


def verify_malimg():
    """
    Verify malimg.
    """
    args = get_args()
    if args.subset:
        print("\n\n------------------------------------------------------") 
        print("| Running repeatability experiments for e=1/255 | ")
        print("------------------------------------------------------\n\n")
    os.makedirs(args.save_dir, exist_ok=True)
    # -------------------------------------------------------------------**
    # Run all experiments or a subset (model = 'linear-25')              **
    # -------------------------------------------------------------------**
    if args.subset:
        models = ["../../models/malimg/malware_malimg_family_scaled_linear-25.onnx"]
    else:
        models = [
            "../../models/malimg/malware_malimg_family_scaled_16-25.onnx",
            "../../models/malimg/malware_malimg_family_scaled_4-25.onnx",
            "../../models/malimg/malware_malimg_family_scaled_linear-25.onnx"
        ]

    vnnlib_directories = [
        "../../vnnlib/malimg"
    ]

    # Loop through each combination of model and vnnlib directory
    for model in models:
        for vnnlib_dir in vnnlib_directories:
            count = {}
            times = {}
            # Check if the vnnlib directory exists
            if not os.path.exists(vnnlib_dir):
                print(f"Directory not found: {vnnlib_dir}")
                continue
                
            vnnlib_files = [f for f in os.listdir(vnnlib_dir) if f.endswith(".vnnlib")]
            vnnlib_files.sort()

            testing = {}

            # Run the model on each vnnlib file
            i = 0
            for vnnlib_file in vnnlib_files:
                # Print statements
                if i %10 == 0:
                    print(f"\n[{i}/{len(vnnlib_files)}]")
                    for k in count.keys():
                        print(f"Robust (e={k}): {count[k]['holds']} out of {count[k]['holds'] + count[k]['violated']}")
                    print("\n")
                i += 1
                vnnlib_path = os.path.join(vnnlib_dir, vnnlib_file)
                #
                # Make outfile name
                #
                model_name = os.path.basename(model).replace(".onnx", "")
                vnnlib_test = os.path.basename(vnnlib_file).replace(".vnnlib", ".txt")
                perturb = get_perturbation(vnnlib_test)

                #
                # Training wheels ...
                # 
                # if perturb in testing:
                #     if testing[perturb] >= 20:
                #         continue
                #     else:
                #         testing[perturb] +=1
                # else:
                #     testing[perturb] = 0

                command = ["python3", "-m", "nnenum.nnenum", model, vnnlib_path, "600"]
                print(f"Running: {' '.join(command)}")
                output = run_command(command)

                # Parse the output to find the runtime
                cnt = 0
                for line in output.split('\n'):
                    if cnt == 2:
                      break
                    if "Runtime:" in line:
                        match = re.search(r"Runtime: (\d+\.\d+) sec", line)
                        if match:
                            # Extract the floating point number
                            runtime = float(match.group(1))
                        cnt += 1
                    if "Timeout" in line:
                        result = "timeout"
                        cnt += 1
                    if "Result" in line:
                        result = "violated" if "UNSAFE" in line else "holds"
                        cnt += 1

                if perturb in count:
                    count[perturb][result] += 1
                else:
                    count[perturb] = defaultdict(int)
                    count[perturb][result] += 1

                # Ex: times[1] = {runtime: 78.99, num: 2]}
                if perturb in times:
                    times[perturb]["runtime"] += runtime
                    times[perturb]["num"] += 1
                else:
                    times[perturb] = {}
                    times[perturb]["runtime"] = runtime
                    times[perturb]["num"] = 1
                
                if i%50 == 0:
                    #
                    # Save information
                    #
                    average_times = {key: times[key]["runtime"]/times[key]["num"] for key in times.keys()}

                    res_name = model_name + "_" + os.path.basename(vnnlib_dir) + "_res.json"
                    with open(os.path.join(args.save_dir, res_name), 'w') as file:
                        json.dump(count, file, indent=4)

                    time_name = model_name + "_" + os.path.basename(vnnlib_dir) + "_time.json"
                    with open(os.path.join(args.save_dir, time_name), 'w') as file:
                        json.dump(average_times, file, indent=4)

            #
            # Save information
            #
            average_times = {key: times[key]["runtime"]/times[key]["num"] for key in times.keys()}
            
            res_name = model_name + "_" + os.path.basename(vnnlib_dir) + "_res.json"
            with open(os.path.join(args.save_dir, res_name), 'w') as file:
                json.dump(count, file, indent=4)
            
            time_name = model_name + "_" + os.path.basename(vnnlib_dir) + "_time.json"
            with open(os.path.join(args.save_dir, time_name), 'w') as file:
                json.dump(average_times, file, indent=4)

            # print statements
            print(f"\n---------{model} : {os.path.basename(vnnlib_dir)} --------------- ")
            for k in count.keys():
                print(f"Robust (e={k}): {count[k]['holds']} out of {count[k]['holds'] + count[k]['violated']}")
            print(" .   .   .")
            for k,v in average_times.items():
                print(f"Average time (e={k}): {v:.4f}")
            print("\n\n")

    print("Finished malimg nnenum.")

if __name__ == "__main__":
    verify_malimg()
