"""
Run all malimg nnenum tests
"""


import os
import subprocess
from collections import defaultdict
import re
import json
import time

# Define your model and vnnlib directories
models = [
    # "../../models/malimg/malware_malimg_family_scaled_16-25.onnx",
    "../../models/malimg/malware_malimg_family_scaled_4-25.onnx",
    # "../../models/malimg/malware_malimg_family_scaled_none-25.onnx"
]

vnnlib_directories = [
    "../../vnnlib/malimg"
]

def get_perturbation(s):
    """
    Get the perturbation value. 
    """
    # Regex pattern to match the number
    pattern = r'(\d+(\.\d+)?)'

    # Searching for the pattern in the string
    match = re.search(pattern, s)

    return match.group(1)

def run_command(command):
    """
    Runs the command
    """
    #
    # Using subprocess to run the command and capture the output
    #
    result = subprocess.run(command, stdout=subprocess.PIPE, text=True)
    #
    # Return the stdout
    #
    return result.stdout

os.makedirs("results/malimg", exist_ok=True)

# Loop through each combination of model and vnnlib directory
for model in models:
    for vnnlib_dir in vnnlib_directories:
        count = {}
        times = defaultdict(list)
        # Check if the vnnlib directory exists
        if not os.path.exists(vnnlib_dir):
            print(f"Directory not found: {vnnlib_dir}")
            continue

        # List all vnnlib files in the directory
        vnnlib_files = [f for f in os.listdir(vnnlib_dir) if f.endswith(".vnnlib")]

        # Run the model on each vnnlib file
        for vnnlib_file in vnnlib_files:
            if "_1_" not in vnnlib_file:
              continue
            vnnlib_path = os.path.join(vnnlib_dir, vnnlib_file)
            #
            # Make outfile name
            #
            model_name = os.path.basename(model).replace(".onnx", "")
            vnnlib_test = os.path.basename(vnnlib_file).replace(".vnnlib", ".txt")
            perturb = get_perturbation(vnnlib_test)
            outfile = model_name + "_" + vnnlib_test
            # already made directory
            outfile = os.path.join("results", "malimg", outfile)
            
            command = ["python3", "-m", "nnenum.nnenum", model, vnnlib_path, "999", "out.txt"]
            print(f"Running: {' '.join(command)}")
            output = run_command(command)

            # Parse the output to find the runtime
            cnt = 0
            for line in output.split('\n'):
                if cnt == 2:
                  break
                if "Runtime:" in line:
                    match = re.search(r"Runtime: (\d+\.\d+) sec", line)
                    if match:
                        # Extract the floating point number
                        runtime = float(match.group(1))
                    cnt += 1
                if "Result" in line:
                    result = "violated" if "UNSAFE" in line else "holds"
                    cnt += 1
            
            if perturb in count:
                count[perturb][result] += 1
            else:
                count[perturb] = defaultdict(int)
                count[perturb][result] += 1

            times[perturb].append(float(runtime))

        average_times = {key: sum(times[key])/len(times[key]) for key in times.keys()}

        res_name = model_name + "_" + os.path.basename(vnnlib_dir) + "_res.json"
        with open(os.path.join("results", res_name), 'w') as file:
            json.dump(count, file, indent=4)

        time_name = model_name + "_" + os.path.basename(vnnlib_dir) + "_time.json"
        with open(os.path.join("results", time_name), 'w') as file:
            json.dump(average_times, file, indent=4)

print("All models have been run on all VNNLIB files.")
