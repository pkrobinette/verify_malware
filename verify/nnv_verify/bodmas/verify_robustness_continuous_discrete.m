%% Robustness verification of malware classification model with Dr. Leach's feature analyis
% Updates: helper function, data loading, etc.

if ~exist("./results", 'dir')
   mkdir("results");
end

% Load feature analysis data
feature_info = readtable('../../../archive/bodmas-feature-analysis-NEW.csv');

% Load data
data = load('../../../archive/bodmas.mat');

% Let's start with a few images per class
X = data.X;
y = data.y;
y = y'; % transpose
y = y+1; % matlab predictions are 1 or 2 

% Scale the data-- > must be scaled!
X_scaled = zscore(X); % standard scaler equivalent

% Init variables
rng(0); % initialize random seed to select inputs to verfy
N = 100; % number of samples to verify (may be different for every model)
idxs = randperm(size(X_scaled,1),N);
XData = X_scaled(idxs,:);
YData = y(idxs);

% Load model
models = ["../../../models/bodmas/malware_bodmas_binary_scaled_none-2.onnx";
    "../../../models/bodmas/malware_bodmas_binary_scaled_4-2.onnx";
    "../../../models/bodmas/malware_bodmas_binary_scaled_16-2.onnx"];

% Verify every model
for ms = 1:length(models)
    % Select model
    modelName = models(ms);
    % Name fix
    saveName = split(modelName,'/');
    saveName = split(saveName{end}, '.');
    saveName = saveName{1};
    disp("Running model: "+saveName);
    % load model and convert
    netonnx = importONNXNetwork(modelName, "InputDataFormats", "BC");
    net = matlab2nnv(netonnx); % convert to NNV
    numClasses = 2;
    net.OutputSize = numClasses;
    
    % Robustness verification
    reachOptions.reachMethod = 'relax-star-area';
    reachOptions.relaxFactor = 0.5;
    epsilon = [0.001; 0.005; 0.01]; % scale of attack 
    nE = length(epsilon); % number of different attacks to evaluate
    res = zeros(N,nE); % robust result
    time = zeros(N,nE); % computation time
    met = repmat("relax", [N, nE]); % method used to compute result
    nR = 497; % number of random samples from input set to eval (for falsification)

    for e=1:nE
        ep = epsilon(e);
        for i=1:N
            % fewer prints for bigger runs
            if N > 20
                if mod(i, 20) == 0
                    disp("Verifying example:  "+string(i));
                    disp("Robust = "+string(sum(res(:,e)==1))+" out of " + string(i-1) + " samples");
                end
            else
                disp("Verifying example:  "+string(i));
            end
            IS = L_inf_attack_informed(XData(i,:), ep, feature_info);
            
            % Let's try some simple "refinement" (sim, relax, approx)
            t = tic;
            
            % Attempt at falsification
            xBox = Box(IS.im_lb', IS.im_ub');
            xF = xBox.sample(nR);
            xF(:,nR+1) = XData(i,:); % add original image
            xF(:,nR+2) = IS.im_lb'; % add lower bound
            xF(:,nR+3) = IS.im_ub'; % add upper bound

            % Classify all random inputs and look for counterexamples
            predictedLabels = predict(netonnx, xF');
            [~, predictedLabels] = max(predictedLabels, [], 2);
            if any(predictedLabels ~= YData(i))
                temp = 0; % counterexample found
                met(i,e) = "counterexample";

            else % attempt to verify using relax reachability (50%)
                temp = net.verify_robustness(IS,reachOptions,YData(i));
                
                % attempt to verify using approx reachability and model contains relu
                if temp ~= 1 && temp ~= 0 && ~contains(saveName, "none") 
                    reachOptions = struct;
                    reachOptions.reachMethod = 'approx-star';
                    temp = net.verify_robustness(IS,reachOptions,YData(i));
                    met(i,e) = "approx";
                end
            end
            res(i,e) = temp;
            time(i, e) = toc(t);
            reachOptions.reachMethod = 'relax-star-area';
            reachOptions.relaxFactor = 0.5;
        end
        % Results
        disp("========  RESULTS  e: "+string(epsilon(e))+" ========");
        disp("");
        disp("Average computation time: "+string(sum(time(:,e))/N));
        disp("Robust = "+string(sum(res(:,e)==1))+" out of " + string(N) + " samples");
        disp(" ");
        save("results/robustness_"+saveName+"_continuous_discrete","res","time","epsilon","met");
    end
    
end



%% Helper Functions
function IS = L_inf_attack_informed(x,epsilon,info)
    % This uses epsilon to scale the range between a features scaled
    % values.
    % Just looking at continuous features right now
    % Categories include: ['Continuous', 'Hash Categorical' ,
    %           'Hash Categorical Discrete', 'Discrete with large range' ,
    %           'Binary', 'Categorical' ,'Mem related']
    mask = contains(info.Category, ["Continuous", "Discrete with large range"]);
    indices = find(mask);
    
    % get range for each feature
    range = info.scaled_max - info.scaled_min;
    diff = zeros(size(range));
    % only use the continuous variables
    diff(indices) = range(indices);
    % apply epsilong to every value
    diff = diff * epsilon;
    diff = diff';

    % --> lb = x - diff (diff is epsilon informed by info)
    lb = x - diff;
    % lb = max(lb, info.scaled_min.'); % ensure no values < min value

    % --> ub = x + diff (diff is epsilon informed by info)
    ub = x + diff;
    % ub = min(ub, info.scaled_max.'); % ensure no values > max value 
    IS = ImageStar(lb,ub);
end

