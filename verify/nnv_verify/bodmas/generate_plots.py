"""
Generate results plots for BODMAS dataset.
"""


import os
import scipy.io
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import sys

sns.set_theme()

# plot template
# plt.rcParams['text.usetex'] = True
fs = 20

font = {'family' : 'serif',
        'serif':['Computer Modern'],
        'size'   : fs-4}

# all of the epsilons are in % form
epsilons = {"all":[0.01, 0.05, 0.1], # ==> in percentage form
            "continuous_discrete":[0.1, 0.5, 1],
            "continuous": [1, 5, 10],
            "discrete": [0.1, 0.5, 1]}


def main():
    if os.path.exists("figures") == 0:
        os.mkdir("figures")
        
    coverage = ["all", "continuous_discrete","discrete", "continuous"]
    models = ["none-2", "4-2", "16-2"]
    get_name = lambda mod, cov: f"results/robustness_malware_bodmas_binary_scaled_{mod}_{cov}.mat"

    
    for I, c in enumerate(coverage):
        print("Creating plots for: ", c)
        res = {}
        time = {}
        eps = epsilons[c]
        #
        # Gather data
        #
        for m in models:
            # load data
            mat = scipy.io.loadmat(get_name(m, c))
            # load res, time keys
            r = mat["res"]
            t = mat["time"]
            
            res[m] = []
            time[m] = []
            
            for i in range(len(eps)):
                # result is the number == 1
                sat = [1 if val[i] == 1 else 0 for val in r]
                res[m].append(sum(sat))
                
                # time is the mean
                time[m].append(round(np.mean([val[i] for val in t]), 2))
        #
        # Create Plots
        #
        # Create the figure and axis objects for both plots
        NUM = len(r)
        fig1, ax1 = plt.subplots()
        fig2, ax2 = plt.subplots()
        
        # Plot the time data
        for key, values in time.items():
            ax1.plot(eps, values, ".-", label=key)
        
        # Set title and labels for the time plot
        # ax1.set_title("Time Plot", fontsize=fs)
        ax1.set_xlabel("Perturbations (\%)", fontsize=fs)
        ax1.set_ylabel("Time $(s)$", fontsize=fs)
        ax1.tick_params(axis='x', labelsize=fs)
        ax1.tick_params(axis='y', labelsize=fs)
        # ax1.set_ylim(0, 1.3)
        if c == "all":
            ax1.set_yticks([0.0, 0.5, 1.0, 1.5])
            ax1.legend(loc="upper left", ncols=3, fontsize=fs-4)  # show legend
        else:
            ax1.set_yticks([0.0, 0.1, 0.2, 0.3])
            ax1.legend(loc="lower left", ncols=3, fontsize=fs-4)  # show legend
        # tix = [r''+str(ep)+'\%' for ep in eps]
        # ax1.set_xticks(eps, tix)
        ax1.set_xticks(eps)
        
        # Plot the res data
        for key, values in res.items():
            ax2.plot(eps, values, ".-", label=key)
        ax2.plot(eps, [NUM]*len(eps), "--", color="black", label="Total Samples")
        
        # Set title and labels for the res plot
        # ax2.set_title("Res Plot", fontsize=fs)
        ax2.set_xlabel("Perturbations (\%)", fontsize=fs)
        ax2.set_ylabel("SAT", fontsize=fs)
        ax2.legend(loc='lower left', ncols=2, fontsize=fs-4)  # show legend
        ax2.tick_params(axis='x', labelsize=fs)
        ax2.tick_params(axis='y', labelsize=fs)
        ax2.set_ylim(0, NUM+5)
        ax2.set_xticks(eps)
        ax2.set_yticks([0, 50, 100, 150, 200])
        
        fig1.savefig(f"figures/Fig_{I+4}b.pdf", bbox_inches='tight')
        fig2.savefig(f"figures/Fig_{I+4}a.pdf", bbox_inches='tight')
        # Show the plots
        # plt.show()
    # print("\nFinished. All plots saved to: figures/")
            
if __name__ == "__main__":
    main()
        
    
