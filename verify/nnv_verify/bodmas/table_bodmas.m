%% Load all results
cd results;

% 5 models analyzed (ordered from smaller to larger)
% N = 100; % number of images analyzed (per model, per epsilon value)
% epsilon = [0.01%, 0.05%, 0.1%, 0.3%, 0.5%, 1%] % 
% attack is a variation of L_inf, where the attack value is a percentage of 
% the range for each feature in the input

% model_none-2
model_none_2{1} = load('robustness_malware_bodmas_binary_scaled_none-2_all.mat'); % all
model_none_2{2} = load('robustness_malware_bodmas_binary_scaled_none-2_continuous.mat'); % continuous
model_none_2{3} = load('robustness_malware_bodmas_binary_scaled_none-2_continuous_discrete.mat'); % continuous+discrete
model_none_2{4} = load('robustness_malware_bodmas_binary_scaled_none-2_discrete.mat'); % discrete
model_none_2_a  = get_model_data(model_none_2{1}); % L_inf on all features
model_none_2_c  = get_model_data(model_none_2{2}); % L_inf on continuous features
model_none_2_cd = get_model_data(model_none_2{3}); % L_inf on continuous+discrete features
model_none_2_d  = get_model_data(model_none_2{4}); % L_inf on discrete features

% model_scaled_4-2
model_4_2{1} = load('robustness_malware_bodmas_binary_scaled_4-2_all.mat'); % all
model_4_2{2} = load('robustness_malware_bodmas_binary_scaled_4-2_continuous.mat'); % continuous
model_4_2{3} = load('robustness_malware_bodmas_binary_scaled_4-2_continuous_discrete.mat'); % continuous+discrete
model_4_2{4} = load('robustness_malware_bodmas_binary_scaled_4-2_discrete.mat'); % discrete
model_4_2_a  = get_model_data(model_4_2{1}); % L_inf on all features
model_4_2_c  = get_model_data(model_4_2{2}); % L_inf on continuous features
model_4_2_cd = get_model_data(model_4_2{3}); % L_inf on continuous+discrete features
model_4_2_d  = get_model_data(model_4_2{4}); % L_inf on discrete features

% model_scaled_16-2
model_16_2{1} = load('robustness_malware_bodmas_binary_scaled_16-2_all.mat'); % all
model_16_2{2} = load('robustness_malware_bodmas_binary_scaled_16-2_continuous.mat'); % continuous
model_16_2{3} = load('robustness_malware_bodmas_binary_scaled_16-2_continuous_discrete.mat'); % continuous+discrete
model_16_2{4} = load('robustness_malware_bodmas_binary_scaled_16-2_discrete.mat'); % discrete
model_16_2_a  = get_model_data(model_16_2{1}); % L_inf on all features
model_16_2_c  = get_model_data(model_16_2{2}); % L_inf on continuous features
model_16_2_cd = get_model_data(model_16_2{3}); % L_inf on continuous+discrete features
model_16_2_d  = get_model_data(model_16_2{4}); % L_inf on discrete features

% model_scaled_32-2
model_32_2{1} = load('robustness_malware_bodmas_binary_scaled_32-2_all.mat'); % all
model_32_2{2} = load('robustness_malware_bodmas_binary_scaled_32-2_continuous.mat'); % continuous
model_32_2{3} = load('robustness_malware_bodmas_binary_scaled_32-2_continuous_discrete.mat'); % continuous+discrete
model_32_2{4} = load('robustness_malware_bodmas_binary_scaled_32-2_discrete.mat'); % discrete
model_32_2_a  = get_model_data(model_32_2{1}); % L_inf on all features
model_32_2_c  = get_model_data(model_32_2{2}); % L_inf on continuous features
model_32_2_cd = get_model_data(model_32_2{3}); % L_inf on continuous+discrete features
model_32_2_d  = get_model_data(model_32_2{4}); % L_inf on discrete features

% model_scaled_64-32-2
model_64_32_2{1} = load('robustness_malware_bodmas_binary_scaled_64-32-2_all.mat'); % all
model_64_32_2{2} = load('robustness_malware_bodmas_binary_scaled_64-32-2_continuous.mat'); % continuous
model_64_32_2{3} = load('robustness_malware_bodmas_binary_scaled_64-32-2_continuous_discrete.mat'); % continuous+discrete
model_64_32_2{4} = load('robustness_malware_bodmas_binary_scaled_64-32-2_discrete.mat'); % discrete
model_64_32_2_a  = get_model_data(model_64_32_2{1}); % L_inf on all features
model_64_32_2_c  = get_model_data(model_64_32_2{2}); % L_inf on continuous features
model_64_32_2_cd = get_model_data(model_64_32_2{3}); % L_inf on continuous+discrete features
model_64_32_2_d  = get_model_data(model_64_32_2{4}); % L_inf on discrete features


% Go back to main bodmas folder
cd ..

%% Create table with results

if is_codeocean()
    fid = fopen([path_results_codeocean, 'bodmas_table.txt'],'w'); 
else
    fid = fopen('results/bodmas_table.txt','w'); 
end
fprintf(fid, '=================================================================================================\n');
fprintf(fid, "               BODMAS robustness results (L_inf) on all features \n");
fprintf(fid, '=================================================================================================\n');
fprintf(fid, '  MODEL                   0.01%%       0.05%%       0.1%%       0.3%%       0.5%%       1%%     \n');
fprintf(fid, '.................................................................................................\n');
create_table_model(fid, model_none_2_a,  "none-2");
create_table_model(fid, model_4_2_a,     "4-2");
create_table_model(fid, model_16_2_a,    "16-2");
create_table_model(fid, model_32_2_a,    "32-2");
create_table_model(fid, model_64_32_2_a, "64-32-2");
fprintf(fid, "\n");
fprintf(fid, '=================================================================================================\n');
fprintf(fid, "               BODMAS robustness results (L_inf) on continuous features \n");
fprintf(fid, '=================================================================================================\n');
fprintf(fid, '  MODEL                   0.01%%       0.05%%       0.1%%       0.3%%       0.5%%       1%%     \n');
fprintf(fid, '.................................................................................................\n');
create_table_model(fid, model_none_2_c,  "none-2");
create_table_model(fid, model_4_2_c,     "4-2");
create_table_model(fid, model_16_2_c,    "16-2");
create_table_model(fid, model_32_2_c,    "32-2");
create_table_model(fid, model_64_32_2_c, "64-32-2");
fprintf(fid, "\n");
fprintf(fid, '=================================================================================================\n');
fprintf(fid, "           BODMAS robustness results (L_inf) on continuous & discrete features \n");
fprintf(fid, '=================================================================================================\n');
fprintf(fid, '  MODEL                   0.01%%       0.05%%       0.1%%       0.3%%       0.5%%       1%%     \n');
fprintf(fid, '.................................................................................................\n');
create_table_model(fid, model_none_2_cd,  "none-2");
create_table_model(fid, model_4_2_cd,     "4-2");
create_table_model(fid, model_16_2_cd,    "16-2");
create_table_model(fid, model_32_2_cd,    "32-2");
create_table_model(fid, model_64_32_2_cd, "64-32-2");
fprintf(fid, "\n");
fprintf(fid, '=================================================================================================\n');
fprintf(fid, "                 BODMAS robustness results (L_inf) on discrete features \n");
fprintf(fid, '=================================================================================================\n');
fprintf(fid, '  MODEL                   0.01%%       0.05%%       0.1%%       0.3%%       0.5%%       1%%     \n');
fprintf(fid, '.................................................................................................\n');
create_table_model(fid, model_none_2_d,  "none-2");
create_table_model(fid, model_4_2_d,     "4-2");
create_table_model(fid, model_16_2_d,    "16-2");
create_table_model(fid, model_32_2_d,    "32-2");
create_table_model(fid, model_64_32_2_d, "64-32-2");
fclose(fid);


function res_summary = get_model_data(structdata)
    
    % number of images evaluated
    N = size(structdata.res,1);
    
    % epsilon = 0.01%
    sat_001  = sum(structdata.res(:,1)==1); % # SAT inputs
    unk_001  = sum(structdata.res(:,1)==2); % # Unknown inputs (should match N - #_SAT - misclassifed)
    time_001 = sum(structdata.time(:,1))/N; % average computation time per input
    
    % epsilon = 0.05%
    sat_005  = sum(structdata.res(:,2)==1); % # SAT inputs
    unk_005  = sum(structdata.res(:,2)==2); % # Unknown inputs (should match N - #_SAT - misclassifed)
    time_005 = sum(structdata.time(:,2))/N; % average computation time per input
    
    % epsilon = 0.1%
    sat_01   = sum(structdata.res(:,3)==1); % # SAT inputs
    unk_01   = sum(structdata.res(:,3)==2); % # Unknown inputs (should match N - #_SAT - misclassifed)
    time_01  = sum(structdata.time(:,3))/N; % average computation time per input
    
    % epsilon = 0.3%
    sat_03   = sum(structdata.res(:,4)==1); % # SAT inputs
    unk_03   = sum(structdata.res(:,4)==2); % # Unknown inputs (should match N - #_SAT - misclassifed)
    time_03  = sum(structdata.time(:,4))/N; % average computation time per input
    
    % epsilon = 0.5%
    sat_05   = sum(structdata.res(:,5)==1); % # SAT inputs
    unk_05   = sum(structdata.res(:,5)==2); % # Unknown inputs (should match N - #_SAT - misclassifed)
    time_05  = sum(structdata.time(:,5))/N; % average computation time per input
    
    % epsilon = 1%
    sat_1    = sum(structdata.res(:,6)==1); % # SAT inputs
    unk_1    = sum(structdata.res(:,6)==2); % # Unknown inputs (should match N - #_SAT - misclassifed)
    time_1   = sum(structdata.time(:,6))/N; % average computation time per input
    
    % Return results summary
    res_summary = [sat_001, unk_001 time_001; sat_005, unk_005, time_005;...
                sat_01, unk_01, time_01; sat_03, unk_03, time_03;...
                sat_05, unk_05, time_05; sat_1, unk_1, time_1];
end

function create_table_model(fid, modelData,modelName)
    fprintf(fid, "               SAT         %3d         %3d         %3d        %3d       %3d       %3d     \n",...
        modelData(1,1), modelData(2,1), modelData(3,1), modelData(4,1), modelData(5,1), modelData(6,1));
    fprintf(fid, " %7s     UNKOWN        %3d         %3d         %3d        %3d       %3d       %3d     \n",...
        modelName, modelData(1,2), modelData(2,2), modelData(3,2), modelData(4,2), modelData(5,2), modelData(6,2));
    fprintf(fid, "             time (s)     %.2f        %.2f        %.2f       %.2f      %.2f      %.2f    \n",...
        modelData(1,3), modelData(2,3), modelData(3,3), modelData(4,3), modelData(5,3), modelData(6,3));
    fprintf(fid, '-------------------------------------------------------------------------------------------------\n');
end
