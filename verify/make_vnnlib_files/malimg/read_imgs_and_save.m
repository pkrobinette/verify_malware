function [data, labels, mal_key] = read_imgs_and_save(N)
% Loads N images (normalized) from each class of the malimg dataset 

    basePath = "../../../archive/malimg_dataset/validation_resize/";
    savePathPrefix = "archive/malimg_dataset/validation_resize/";

    files = dir(basePath);
    mal_dirs = [files.isdir];
    mal_dirs = files(mal_dirs);
    mal_key = {mal_dirs(3:end).name};

    % Initial estimates (will be adjusted later)
    estNumImages = length(mal_key) * N; 
    data = zeros(64, 64, 1, estNumImages);
    labels = zeros(1, estNumImages);
    imagePaths = cell(1, estNumImages); % Initialize cell array to store image paths

    totalImages = 0;

    for i = 1:length(mal_key)
        mal_path = basePath + mal_key{i};
        imgList = dir(fullfile(mal_path, '*.png'));

        % Limit the number of images read per class to N
        numImagesToRead = min(N, length(imgList));
        for j = 1:numImagesToRead
            im = imread(fullfile(mal_path, imgList(j).name));
            im = double(im)./255;

            totalImages = totalImages + 1;

            % Store the modified image path
            imagePaths{totalImages} = fullfile(savePathPrefix, mal_key{i}, imgList(j).name);

            % Check if resizing is needed
            if totalImages > size(data, 4)
                data = cat(4, data, zeros(64, 64, 1, estNumImages - size(data, 4)));
                labels = cat(2, labels, zeros(1, estNumImages - size(labels, 2)));
            end

            data(:, :, 1, totalImages) = im;
            labels(:, totalImages) = i;
        end
    end

    % Trim the excess elements
    data = data(:, :, 1, 1:totalImages);
    labels = labels(:, 1:totalImages);
    imagePaths = imagePaths(:, 1:totalImages); % Trim the excess paths

    % Save the image paths to a CSV file
    imagePathCSV = '../../../archive/malimg_verification_image_paths.csv';
    writecell(imagePaths, imagePathCSV);
end

