"""
Test malimg models trained via pytorch, using ONNX.
"""

import os
import argparse
import numpy as np
import onnxruntime as ort
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from torch import nn
from torch import optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader, random_split
import numpy as np
import random
import torch
import os
import argparse
import tqdm
import torch.onnx
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from train_malimg_pytorch import CNN

DATAPATH = "../../archive/malimg_dataset/"
SAVEDIR = "../../models/malimg"
IMSIZE = 64
BATCH_SIZE = 32
SEED = 14

random.seed(SEED)
np.random.seed(SEED)
torch.manual_seed(SEED)

def get_args():
    """
    Get args
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--datapath", type=str, default=DATAPATH)
    parser.add_argument("--savedir", type=str, default=SAVEDIR)
    parser.add_argument("-s", "--imsize", type=int, default=IMSIZE)
    parser.add_argument("-b", "--batch_size", type=int, default=BATCH_SIZE)
    args = parser.parse_args()
    return args


def load_data(datapath, imsize, batch_size):
    """
    Load malimg dataset. 
    """
    transform = transforms.Compose([
        transforms.Grayscale(),
        transforms.ToTensor(),
        # transforms.Resize((imsize, imsize), antialias=True),
    ])

    test = os.listdir(datapath)
    print(len(test))
    test_dataset = datasets.ImageFolder(root=datapath, transform=transform)

    
    # train_dataset = datasets.ImageFolder(root=os.path.join(datapath, "train"), transform=transform)
    # test_dataset = datasets.ImageFolder(root=os.path.join(datapath, "validation"), transform=transform)

    # train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
    return test_loader
    # return train_loader, test_loader

# ... [Rest of your imports and other functions] ...

def test_classifier_onnx(test_loader, args):
    """
    Test the classifier with ONNX model
    """
    onnx_model_path = f"{args.savedir}/malware_malimg_family_scaled_16-25.onnx"
    
    # Initialize ONNX runtime session
    session = ort.InferenceSession(onnx_model_path)

    all_preds = []
    all_labels = []

    for data, labels in test_loader:
        # Convert PyTorch tensor to numpy array
        data_np = data.numpy()

        # Perform inference
        outputs = session.run(None, {session.get_inputs()[0].name: data_np})
        outputs = np.array(outputs[0])  # Assuming the output is at index 0

        # Get predictions
        predicted = np.argmax(outputs, axis=1)
        all_preds.extend(predicted)
        all_labels.extend(labels.numpy())

    # Calculate metrics
    accuracy = accuracy_score(all_labels, all_preds)
    precision = precision_score(all_labels, all_preds, average='macro')
    recall = recall_score(all_labels, all_preds, average='macro')
    f1 = f1_score(all_labels, all_preds, average='macro')

    print(f"Accuracy: {accuracy}, Precision: {precision}, Recall: {recall}, F1: {f1}")

if __name__ == "__main__":
    #
    # Get args
    #
    args = get_args()
    #
    # Load data
    #
    test_loader = load_data(datapath=args.datapath, imsize=args.imsize, batch_size=args.batch_size)
    # Test classifier with ONNX model
    test_classifier_onnx(test_loader, args)
